#####産卵量データの読み込み#####
setwd(dir = "/Users/Yuki/Google ドライブ/analysis/vast")
es <- read.csv("egg_data2005-201806.csv", fileEncoding = "UTF-8")
es2 <- es
es2$chub_mean_dens[is.na(es2$chub_mean_dens)] <- 0 #卵密度がNAの要素に０を放り込む
summary(es2)
es2$lon2 <- ifelse (es2$lon %% 1 == 0.0, es2$lon, es2$lon %/% 1 + 0.5)
es2$lat2 <- ifelse (es2$lat %% 1 == 0.0, es2$lat, es2$lat %/% 1 + 0.5)
es2$lat2 <- es2$lat2+0.25
es2$lon2 <- es2$lon2+0.25
es2 <- es2[, c(1:4, 6:7, 11:12)]
summary(es2$area_no)
es2 <- subset(es2, area_no < 4)
summary(es2$lat2) #26.75 to 42.75
summary(es2$lon2) #131.25 to 149.75
#es2 <- subset(es2, lon2 < 150)
es2 <- transform(es2, site = paste(lat2, lon2, sep = "_")) #294
n_site <- length(unique(es2$site))
tag_site <- data.frame(unique(es2$site))
#####packages#####
source("http://www.math.ntnu.no/inla/givemeINLA.R")
Version = "VAST_v4_2_0"
require(TMB)
require(VAST)
#####3 Settings#####
setwd(dir = "/Users/Yuki/Google ドライブ")
DateFile = paste(getwd(),'vast0116_lognorm_log_200')
dir.create(DateFile)
###3.1 Spatial settings###
Method = c("Grid", "Mesh", "Spherical_mesh")[2]
Kmeans_Config = list("randomseed" = 1, "nstart" = 100, "iter.max" = 1000)
###3.2 Model settings###
FieldConfig = c(Omega1 = 1, Epsilon1 = 1, Omega2 = 1, Epsilon2 = 1)
RhoConfig = c(Beta1 = 0, Beta2 = 0, Epsilon1 = 0, Epsilon2 = 0)
VesselConfig = c(Vessel = 0, VesselYear = 0)
ObsModel = c(PosDist = 1, Link = 0) #[1] = 1(lognormal) or 2(ガンマ), [2] = 0
###3.3 Stratification for results###
strata.limits <- data.frame(STRATA = "All_areas")
#####4. Prepare the data#####
###4.1 Data-frame for catch-rate data###
cm <- es2
head(cm)
cm2 <- cm[, c("year", "lat2", "lon2", "month", "chub_mean_dens")]
colnames(cm2) <- c("Year", "Lat", "Lon", "Month", "Catch_KG")
cm2 <- subset(cm2, Month < 8)
summary(cm2)
Data_Geostat <- cm2
summary(Data_Geostat$Year)
#####4.2 Extrapolation grid#####
Extrapolation_List = SpatialDeltaGLMM::Prepare_Extrapolation_Data_Fn(
  Regio = "other", #userにすると，zoneが23となってしまう（日本のzoneは51:56）
  strata.limits = strata.limits, 
  observations_LL = Data_Geostat[, c("Lat", "Lon")], 
  #maximum_distance_from_sample = 15,
  #input_grid = Data_Geostat[, c("Lat", "Lon", "Area_km2")] #海区面積(km2)
)
###4.3 derived objects for spatio-temporal estimation###
Spatial_List = SpatialDeltaGLMM::Spatial_Information_Fn(
  #n_x = n_site,
  n_x = 200,
  Lon = Data_Geostat[, "Lon"], 
  Lat = Data_Geostat[, "Lat"], 
  Extrapolation_List = Extrapolation_List, 
  Method = "Mesh",
  grid_size_km = 0.5, #methodがsperical_meshの時はgrid_size_LL, それ以外の時はgrid_size_km
  randomseed = Kmeans_Config[["randomseed"]], 
  nstart = Kmeans_Config[["nstart"]], 
  iter.max = Kmeans_Config[["iter.max"]], 
  DirPath = DateFile,
  Save_Results = FALSE) #Kmeans-100.RDataが作成されるはず. ファイル名の数字には，n_xの値が入る
Data_Geostat <- cbind(Data_Geostat, knot_i = Spatial_List[["knot_i"]])
#####5 Build and run model#####
###5.1 Build model###
Data_Geostat$Year <- as.numeric(as.character(Data_Geostat$Year))
mode(Data_Geostat$Year) #numeric
mode(Data_Geostat$knot_i) #numeric
summary(Data_Geostat$Year) #2005-2018
summary(Data_Geostat$knot_i) #1:200
summary(Data_Geostat$Month) #1:7
TmbData = Data_Fn(
  Version = Version,
  FieldConfig = FieldConfig,
  RhoConfig = RhoConfig,
  ObsModel = ObsModel,
  b_i = Data_Geostat[, "Catch_KG"], 
  a_i = rep(1,nrow(Data_Geostat)),
  #a_i = Data_Geostat[, "Effort"],
  c_iz = rep(0,nrow(Data_Geostat)), #単一種の場合
  #c_iz = as.matrix(Data_Geostat[, "Month"]),
  s_i = Data_Geostat[, "knot_i"] - 1,
  t_iz = as.matrix(Data_Geostat[, c("Year")]), #年だけ
  #t_iz = as.matrix(Data_Geostat[, c("Year", "Month")]),
  #t_iz = as.matrix(Data_Geostat[, "Year"]),
  Q_ik = as.matrix(Data_Geostat[, "Month"] - 1), #とりあえずMonthがcatchabilityのcovariateと仮定
  #Q_ik = mat_month2,
  a_xl = Spatial_List$a_xl,
  #X_xtp = m_sst,
  MeshList = Spatial_List$MeshList,
  GridList = Spatial_List$GridList,
  Method = Spatial_List$Method,
  Aniso = 0, #Using isotropic 2D AR1 hyperdistribution, so switching to Aniso=0
  Options = c(SD_site_density = 1, 
              SD_site_longensity = 1, 
              Calculate_Range = 1, 
              Calculate_evenness = 1, 
              Calculate_effective_area = 1)
)
TmbList = Build_TMB_Fn(TmbData = TmbData,
                       RunDir = DateFile,
                       Version = Version,
                       RhoConfig = RhoConfig,
                       loc_x = Spatial_List$loc_x,
                       Method = Spatial_List$Method)
Obj = TmbList[["Obj"]]
Opt = TMBhelper::Optimize(obj = Obj, 
                          lower = TmbList[["Lower"]], 
                          upper = TmbList[["Upper"]],
                          getsd = TRUE, 
                          savedir = DateFile, 
                          bias.correct = TRUE)
Report = Obj$report()
Save = list("Opt"=Opt, 
            "Report"=Report, 
            "ParHat"=Obj$env$parList(Opt$par),
            "TmbData"=TmbData)
save(Save, file=paste0(DateFile,"Save.RData"))
setwd(dir = "/Users/Yuki/Google ドライブ/vast0116_lognorm_log_200")
load("vast0116_lognorm_log_200Save.RData")
##----------------------
## 6 Diagnostic plots
# 6.1 Plot data
SpatialDeltaGLMM::Plot_data_and_knots(Extrapolation_List = Extrapolation_List,
                                      Spatial_List = Spatial_List, 
                                      Data_Geostat = Data_Geostat,
                                      PlotDir = DateFile)
# 6.2 Convergence
# require(pander) which(sapply(t, is.factor)) でエラー: 'which' へ渡す引数が論理型ではありません 
pander::pandoc.table(Opt$diagnostics[,c('Param','Lower','MLE',
                                        'Upper','final_gradient')] )
test <- Opt[[1]][[10]] #Opt$diagnostics
# 6.3 Diagnostics for encounter-probability component
Enc_prob = SpatialDeltaGLMM::Check_encounter_prob(Report = Report,
                                                  Data_Geostat = Data_Geostat, 
                                                  DirName = DateFile)
Q = SpatialDeltaGLMM::QQ_Fn(TmbData = TmbData, 
                            Report = Report)
# 6.5 Diagnostics for plotting residuals on a map
# Get region-specific settings for plots
MapDetails_List = SpatialDeltaGLMM::MapDetails_Fn(
  "Region"="other",
  "NN_Extrap"=Spatial_List$PolygonList$NN_Extrap, 
  "Extrapolation_List"=Extrapolation_List)
# Decide which years to plot
Year_Set = seq(min(Data_Geostat[,'Year']),max(Data_Geostat[,'Year']))
Years2Include = which( Year_Set %in% sort(unique(Data_Geostat[,'Year'])))
# tapply(bpred_ipos[which_ipos_in_y], INDEX = factor(TmbData$s_i[which_i_in_y_and_pos],  でエラー: arguments must have same length
SpatialDeltaGLMM:::plot_residuals(Lat_i = Data_Geostat[,"Lat"], 
                                  Lon_i = Data_Geostat[, "Lon"], 
                                  TmbData = TmbData,
                                  Report = Report, 
                                  Q = Q, 
                                  savedir = DateFile,
                                  MappingDetails = MapDetails_List[["MappingDetails"]],
                                  PlotDF = MapDetails_List[["PlotDF"]],
                                  MapSizeRatio = MapDetails_List[["MapSizeRatio"]],
                                  Xlim = MapDetails_List[["Xlim"]], 
                                  Ylim = MapDetails_List[["Ylim"]],
                                  FileName = DateFile, 
                                  Year_Set = Year_Set, 
                                  Years2Include = Years2Include,
                                  Rotate = MapDetails_List[["Rotate"]], 
                                  Cex = MapDetails_List[["Cex"]],
                                  Legend = MapDetails_List[["Legend"]], 
                                  zone = MapDetails_List[["Zone"]],
                                  mar = c(0, 0, 2, 0), 
                                  oma = c(3.5, 3.5, 0, 0), 
                                  cex = 1)
# 6.6 Model selection
Opt$AIC
#----------------------
# 7 Model output
# 7.1 Direction of “geometric anisotropy???
SpatialDeltaGLMM::PlotAniso_Fn(FileName = paste0(DateFile,"Aniso.png"), 
                               Report = Report, 
                               TmbData = TmbData)
head(MapDetails_List[["PlotDF"]])
# 7.2 Density surface for each year
SpatialDeltaGLMM::PlotResultsOnMap_Fn(plot_set = c(3),
                                      MappingDetails = MapDetails_List[["MappingDetails"]],
                                      Report = Report, 
                                      Sdreport = Opt$SD, 
                                      PlotDF = MapDetails_List[["PlotDF"]],
                                      MapSizeRatio = MapDetails_List[["MapSizeRatio"]],
                                      Xlim = MapDetails_List[["Xlim"]], 
                                      Ylim = MapDetails_List[["Ylim"]],
                                      FileName = DateFile, 
                                      Year_Set = Year_Set, 
                                      Years2Include = Years2Include,
                                      Rotate = MapDetails_List[["Rotate"]], 
                                      Cex = MapDetails_List[["Cex"]],
                                      Legend = MapDetails_List[["Legend"]], 
                                      zone = MapDetails_List[["Zone"]],
                                      mar = c(0, 0, 2, 0), 
                                      oma = c(3.5, 3.5, 0, 0), 
                                      cex = 1, 
                                      plot_legend_fig = TRUE)
# 7.3 Index of abundance
Index = SpatialDeltaGLMM::PlotIndex_Fn(DirName = DateFile,
                                       TmbData = Save$TmbData, 
                                       Sdreport = Save$Opt[["SD"]],
                                       Year_Set = Year_Set,
                                       Years2Include = Years2Include, #年数？
                                       use_biascorr = TRUE
)
pander::pandoc.table(Index$Table[, c("Year","Fleet","Estimate_metric_tons", 
                                     "SD_log", "SD_mt")])
# 7.4 Center of gravity and range expansion/contraction
SpatialDeltaGLMM::Plot_range_shifts(Report = Report, 
                                    TmbData = TmbData, 
                                    Sdreport = Opt[["SD"]],
                                    Znames = colnames(TmbData$Z_xm),
                                    PlotDir = DateFile, 
                                    Year_Set = Year_Set)

